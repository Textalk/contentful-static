"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

exports.createClient = createClient;
Object.defineProperty(exports, "__esModule", {
  value: true
});
"use strict";

var axios = _interopRequire(require("axios"));

var resolveResponse = _interopRequire(require("contentful-resolve-response"));

var querystring = _interopRequire(require("querystring"));

function createClient(options) {
  return new Client(options || {});
}

;

var Client = (function () {
  function Client(_ref) {
    var accessToken = _ref.accessToken;
    var space = _ref.space;
    var secure = _ref.secure;
    var host = _ref.host;

    _classCallCheck(this, Client);

    if (!accessToken) {
      throw new TypeError("Expected property accessToken");
    }

    if (!space) {
      throw new TypeError("Expected property space");
    }

    var insecure = secure === false;

    var _ref2 = host && host.split(":") || [];

    var _ref22 = _slicedToArray(_ref2, 2);

    var hostname = _ref22[0];
    var port = _ref22[1];

    hostname = hostname || "cdn.contentful.com";
    port = port || (insecure ? 80 : 443);

    this.options = {
      baseUrl: "" + (insecure ? "http" : "https") + "://" + hostname + ":" + port + "/spaces/" + space,
      accessToken: accessToken
    };
  }

  _createClass(Client, {
    _request: {
      value: function _request(path, query) {
        if (!query) {
          query = {};
        };

        query.access_token = this.options.accessToken;

        var params = {
          headers: {},
          method: "get",
          url: "" + this.options.baseUrl + "" + path + "?" + querystring.stringify(query)
        };

        params.headers["Content-Type"] = "application/vnd.contentful.delivery.v1+json";
        
        return axios(params).then(function (response) {
          return response.data;
        })["catch"](function (error) {
          throw error.data;
        });
      }
    },
    asset: {
      value: function asset(id, callback) {
        return nodeify(this._request("/assets/" + id).then(parseResource), callback);
      }
    },
    assets: {
      value: function assets(object, callback) {
        var query = new Query(object);
        var deferred = this._request("/assets", query).then(parseSearchResult);
        return nodeify(deferred, callback);
      }
    },
    contentType: {
      value: function contentType(id, callback) {
        var deferred = this._request("/content_types/" + id).then(ContentType.parse);
        return nodeify(deferred, callback);
      }
    },
    contentTypes: {
      value: function contentTypes(object, callback) {
        var query = new Query(object);
        var deferred = this._request("/content_types", query).then(parseSearchResult);
        return nodeify(deferred, callback);
      }
    },
    entry: {
      value: function entry(id, callback) {
        var deferred = this._request("/entries/" + id).then(Entry.parse);
        return nodeify(deferred, callback);
      }
    },
    entries: {
      value: function entries(object, callback) {
        var query = new Query(object);
        var deferred = this._request("/entries", query).then(parseSearchResult);
        return nodeify(deferred, callback);
      }
    },
    space: {
      value: function space(callback) {
        return nodeify(this._request(""), callback);
      }
    },
    _pagedSync: {
      value: function _pagedSync(sync) {
        var self = this;
        return this._request("/sync", sync.query).then(function (data) {
          sync.append(data);

          if (!sync.done) {
            return self._pagedSync(sync);
          } else {
            return {
              items: sync.items,
              nextSyncToken: sync.nextSyncToken
            };
          }
        });
      }
    },
    sync: {
      value: function sync(object, callback) {
        if (!object || !object.initial && !object.nextSyncToken) {
          throw new Error("Please provide either the initial flag or a nextSyncToken for syncing");
        }
        var query = new Query(object);
        var deferred = this._pagedSync(new Sync(query)).then(function (response) {
          response.items = parseSearchResult(response);
          return response;
        });
        return nodeify(deferred, callback);
      }
    }
  });

  return Client;
})();

var Asset = (function () {
  function Asset(_ref) {
    var sys = _ref.sys;
    var fields = _ref.fields;

    _classCallCheck(this, Asset);

    this.sys = new Sys(sys);
    this.fields = fields;
  }

  _createClass(Asset, null, {
    parse: {
      value: function parse(object) {
        return new Asset(object);
      }
    }
  });

  return Asset;
})();

var Entry = (function () {
  function Entry(_ref) {
    var sys = _ref.sys;
    var fields = _ref.fields;

    _classCallCheck(this, Entry);

    this.sys = new Sys(sys);
    this.fields = fields;
  }

  _createClass(Entry, null, {
    parse: {
      value: function parse(object) {
        return new Entry(object);
      }
    }
  });

  return Entry;
})();

var ContentType = (function () {
  function ContentType(_ref) {
    var sys = _ref.sys;
    var fields = _ref.fields;
    var name = _ref.name;
    var displayField = _ref.displayField;

    _classCallCheck(this, ContentType);

    this.sys = new Sys(sys);
    this.name = name;
    this.displayField = displayField;
    this.fields = fields && fields.map(Field.parse);
  }

  _createClass(ContentType, null, {
    parse: {
      value: function parse(object) {
        return new ContentType(object);
      }
    }
  });

  return ContentType;
})();

var Field = (function () {
  function Field(object) {
    _classCallCheck(this, Field);

    for (var k in object) {
      this[k] = object[k];
    }
  }

  _createClass(Field, null, {
    parse: {
      value: function parse(object) {
        return new Field(object);
      }
    }
  });

  return Field;
})();

var Query = (function () {
  function Query(object) {
    _classCallCheck(this, Query);

    for (var k in object) {
      this[k] = object[k];
    }
  }

  _createClass(Query, {
    toQueryString: {
      value: function toQueryString() {
        return querystring.stringify(this);
      }
    }
  }, {
    parse: {
      value: function parse(object) {
        return new Query(stringifyArrayValues(object));
      }
    }
  });

  return Query;
})();

var Space = (function () {
  function Space() {
    var props = arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Space);

    for (var k in props) {
      this[k] = props[k];
    }
  }

  _createClass(Space, null, {
    parse: {
      value: function parse(object) {
        return new Space(object);
      }
    }
  });

  return Space;
})();

var Sys = (function () {
  function Sys(_ref) {
    var id = _ref.id;
    var revision = _ref.revision;
    var type = _ref.type;
    var locale = _ref.locale;
    var contentType = _ref.contentType;
    var createdAt = _ref.createdAt;
    var linkType = _ref.linkType;
    var updatedAt = _ref.updatedAt;
    var space = _ref.space;

    _classCallCheck(this, Sys);

    this.id = id;
    this.revision = revision;
    this.type = type;
    this.locale = locale;
    this.space = space && Link.parse(space);
    this.contentType = contentType && new Link(contentType);
    this.createdAt = createdAt && new Date(createdAt);
    this.updatedAt = updatedAt && new Date(updatedAt);
  }

  _createClass(Sys, null, {
    parse: {
      value: function parse(object) {
        return new Sys(object);
      }
    }
  });

  return Sys;
})();

var Link = (function () {
  function Link(_ref) {
    var sys = _ref.sys;

    _classCallCheck(this, Link);

    this.sys = new Sys(sys);
  }

  _createClass(Link, null, {
    parse: {
      value: function parse(object) {
        return new Link(object);
      }
    }
  });

  return Link;
})();

var Sync = (function () {
  function Sync(query) {
    _classCallCheck(this, Sync);

    this.query = query;
    this.items = [];
    this.done = false;
  }

  _createClass(Sync, {
    append: {
      value: function append(data) {
        var _this = this;

        this.items = this.items.concat(data.items);

        if (data.nextPageUrl) {
          var nextPageUrl = data.nextPageUrl.split("?");
          this.query = Object.keys(this.query).reduce(function (query, key) {
            if (key !== "initial" && key !== "type" && key !== "sync_token") {
              query[key] = _this.query[key];
            }
            return query;
          }, {});
          this.query.sync_token = querystring.parse(nextPageUrl[1]).sync_token;
        } else if (data.nextSyncUrl) {
          var nextSyncUrl = data.nextSyncUrl.split("?");
          this.nextSyncToken = querystring.parse(nextSyncUrl[1]).sync_token;
          this.done = true;
        }
      }
    }
  });

  return Sync;
})();

var parseableResourceTypes = {
  Asset: Asset,
  ContentType: ContentType,
  Entry: Entry,
  Space: Space
};

function isParseableResource(object) {
  return object && object.sys && object.sys.type in parseableResourceTypes;
}

function parseResource(resource) {
  var Type = parseableResourceTypes[resource.sys.type];
  return Type.parse(resource);
}

function parseSearchResult(object) {
  walkMutate(object, isParseableResource, parseResource);
  var items = resolveResponse(object);
  Object.defineProperties(items, {
    limit: { value: object.limit, enumerable: false },
    skip: { value: object.skip, enumerable: false },
    total: { value: object.total, enumerable: false }
  });
  return items;
}

function stringifyArrayValues(object) {
  return keys(object).reduce(function (result, key) {
    var value = object[key];
    result[key] = Array.isArray(value) ? value.join(",") : value;
    return result;
  }, {});
}

function walkMutate(input, pred, mutator) {
  if (pred(input)) {
    return mutator(input);
  }

  if (input && typeof input === "object") {
    for (var key in input) {
      input[key] = walkMutate(input[key], pred, mutator);
    }
  }

  return input;
}

function nodeify(deferred, callback) {
  if (callback) {
    return deferred.then(function (response) {
      callback(null, response);
      return response;
    })["catch"](function (error) {
      callback(error);
      throw error;
    });
  }
  return deferred;
}

//# sourceMappingURL=index.es5.js.map
